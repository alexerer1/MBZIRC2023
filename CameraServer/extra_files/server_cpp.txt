// Server side C/C++ program to demonstrate Socket programming 
#include <unistd.h> 
#include <stdio.h> 
#include <sys/socket.h> 
#include <stdlib.h> 
#include <netinet/in.h> 
#include <string> 
#include <string.h> 


#include <signal.h>

#include <pthread.h>

#define PORT 8080 

int run = 1;
float number = 0;
pthread_t _thread;
int new_socket;

void INThandler(int);

void INThandler(int sig){
	signal(sig, SIG_IGN);
	run = 0;
	close(new_socket);
	pthread_join(_thread, NULL);
	printf("Ctrl+C detected");	
	exit(0);
}


void * server_thread(void * nothing) {

	while( run ) {

		number += 1.1;
		usleep(100);

	}

}

int main(int argc, char const *argv[]) 
{ 
	int server_fd, valread; 
	struct sockaddr_in address; 
	int opt = 1; 
	int addrlen = sizeof(address); 
	char buffer[1024] = {0}; 
	char *hello = "Hello from server"; 
	
    signal(SIGINT, INThandler);

	// Creating socket file descriptor 
	if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) 
	{ 
		perror("socket failed"); 
		exit(EXIT_FAILURE); 
	} 
	
	// Forcefully attaching socket to the port 8080 
	if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, 
												&opt, sizeof(opt))) 
	{ 
		perror("setsockopt"); 
		exit(EXIT_FAILURE); 
	} 
	address.sin_family = AF_INET; 
	address.sin_addr.s_addr = INADDR_ANY; 
	address.sin_port = htons( PORT ); 
	
	// Forcefully attaching socket to the port 8080 
	if (bind(server_fd, (struct sockaddr *)&address, 
								sizeof(address))<0) 
	{ 
		perror("bind failed"); 
		exit(EXIT_FAILURE); 
	} 
	if (listen(server_fd, 3) < 0) 
	{ 
		perror("listen"); 
		exit(EXIT_FAILURE); 
	} 
	if ((new_socket = accept(server_fd, (struct sockaddr *)&address, 
					(socklen_t*)&addrlen))<0) 
	{ 
		perror("accept"); 
		exit(EXIT_FAILURE); 
	}

	if( pthread_create(&_thread, NULL, &server_thread, NULL) != 0) {
		printf("Thread not created\n");
	}


	char msg[100];

	while( run ) {

		valread = read( new_socket , buffer, 1024);

		std::string request(buffer);

		if( request.compare("request_angle") == 0){
			printf("THE STRINGS MATCH\n");
			sprintf(msg, "%f %f", number, number);
			send(new_socket , msg , strlen(msg) , 0 ); 
		}
	
	}

	pthread_join(_thread, NULL);

	return 0; 
} 
